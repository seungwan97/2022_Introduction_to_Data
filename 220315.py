
# 주석처리

#파이썬 특징
#1.파이썬은 인간다운 언어이다. 고급언어(우리가 쓰는 프로그래밍 언어)/어쎔블리어/기계어(가장 컴퓨터에 친화적인 언어)
#즉 파이썬은 고급언어이며 어쎔블리어 기계어는 몰라도 된다.
#2.파이썬은 문법이 쉽다.
#3.파이썬은 무료이다.(오픈소스이다.)
#4.파이썬은 간결하다.
#5.파이썬은 개발속도가 빠르다.

#파이썬으로 할 수 있는 것
#1.유틸리티 프로그램 제작
#2.GUI 프로그래밍
#3.C언어 C++와 결합 ->
#4.웹 프로그래밍
#5.데이터베이스 프로그래밍
#6.데이터 분석, 사물 인터넷
#7.수치연산 프로그래밍

#파이썬으로 개발할 수 없는 것?
#1.모바일 프로그래밍 -> ios, 안드로이드는 특화된 환경에서만 개발이 가능하기 때문

#코딩 vs 프로그래밍
#프론트엔드 vs 백엔드 -> 둘다 웹개발자 영역
#풀스택 -> 프론트엔드와 백엔드를 다 다룰줄 아는 개발자
#웹퍼블리셔

print(1+1)
print(3/2.4) #나누기
print(3*10) #곱하기
#보라색:함수, 파란색:숫자데이터, 초록색:문자데이터 (파이참에서 제공하는 색이며, 이는 다른색으로 설정 가능)

#변수 -> 데이터를 저장하는 공간을 의미

a=10 #-> 10이라는 데이터를 a라는 변수에 저장한다
b=20
c=30

print(b+c)

d="python" #문자데이터는 항상 ""이나 ''추가(큰것 작은것은 상관없으며 각각 짝은 맞춰줘야함)
print(d)
#만약 문제가 있는 코드라면 파이참에서는 빨간줄로 표시를 해준다.
#함수는 두 갈래로 나뉜다. 1.내장함수/2.사용자정의 함수
#프로그래밍은 소문자와 대문자를 구분하기 때문에 이를 철저히 지켜야한다. (ex. print(o)/Print(x)

#데이터, 자료의 종류
#1.숫자형
#1-1.정수형 1,2,3,4,5,6,100,...,1000
#1-2.실수형 1.5,3.14,...,10.2
#1-3.8진수
#1-4.16진수
#1-5.2진수

#변수에 값을 부여하는 것을 '변수를 선언했다', '데이터에 대입했다'라고 함
e=11
f=-10
g=100

print(e+f+g)
print(e*g-f)

print(e+f*g) #코드에서의 사칙연산도 일반수학처럼 우선순위가 적용이된다(곱셈나눗셈우선, 덧셈뺄셈그후)
print((e+f)*g) #우선순위는 일반수학처럼 괄호로 줄수 있다.

#제곱 연산자 : **
print(3**2) #3의 2제곱

#나머지 연산자 : %
print(5%2) #5 나누기 2의 나머지

#몫 연산자 : //
print(5//2) #5 나누기 2의 몫(결과가 정수만 나온다는 특징이 있다.)

#자료, 데이터 형태2
#문자열 데이터
#string : 문자, 단어 등으로 구성된 문자들의 집합
#""나 ''로 감싸야한다.

x='hello' #hello라고 하는 데이터(문자)를 x에 대입했다(오른쪽에서 왼쪽으로 해석하는 것이 가장 좋음)
y='123' #123이라고 하는 데이터(문자)를 y에 대입했다 (여기서 123은 ''를 썼기 때문에 문자임)
x1='hello world' #문자는 띄어쓰기도 문자로 취급하기 때문에 이 데이터는 총 11개로 된 문자이다.(한칸한칸이 전부 메모리의 용량을 차지한다.)
x2='life is too short, you need python' #이 또한 모든 띄어쓰기가 문자에 포함된다.

print(x1)

y1="python's name" #만약 이처럼 문자안에 '가 들어간 상황이라면 이를 감싸는 따옴표는 무조건 ""가 되어야 한다.
#오류가 난 부분은 항상 뒤에 어떤 코드를 짜든 아무의미가 없다. 따라서 오류는 꼭 지워야 한다.
print(1)
print(2)

say='"python is very easy.", he says' #대화체같이 큰따옴표가 문자 안에 있다면 꼭 작은따옴표로 감싸야 한다.
print(say)

y1='python\'s name' #\는 백스페이스 아래 키보드이다. #작은 따옴표안에 's가 있다면 's앞에 꼭 \를 써야 한다.
print(y1)


#문자열의 연산
#파이썬에서 문자열을 더하거나 곱할 수 있다.

str1="python"
str2=" is fun."

print(str1+str2) #만약 거꾸로 연산이 되면 당연히 문장도 거꾸로 된다.

#문자열의 곱하기 연산
str3='python'
print(str3*10) #str3에 해당되는 문자를 10번 반복한다

x='hello'
y='123'
x1='hello            world'
x2='life is too short, you need python'

print(len(x)) #len 함수는 길이를 재는 함수지 출력하는 함수가 아니기 때문에 print함수로 한번더 감싸주어야 한다.
#함수의 중첩사용 예시
#len함수는 대상의 길이를 구하는 함수
#중첩된 함수의 해서은 가장 안에서부터 해석을 시작한다.
print(len(x1)) #공백(화이트스페이스) 또한 len을 먹는다(차지한다)
#빈칸, 쉼표 마침표 등 전부 문자열에 포함되어 카운트 된다.

#len, print처럼 이미 기능이 구현된 함수를 내장함수라고 한다.(이외의 것은 '사용자 지정 함수'이다)


#문자열 인덱싱 indexing : 특정 문자를 가리킨다.(추출한다.)
a="life is too short."
print(a[3]) #a의 3번째 문자(0부터 셀때)
#문자열 인덱싱은 번호가 0부터 시작한다.
print(a[0])
print(a[8]+a[3]+a[12]+a[8])
print(a[-1]) #-는 끝에서 세는데, 이때는 0부터 세지않고 1부터 센다.

#문자열 슬라이싱 : 문자열에 특정 문자를 잘라낸다.
a="life is too short."
print(a[0:4]) #a의 0부터 4까지만 출력(0이상 4미만) ('부터'는 출력되고 '까지'는 출력되지 않는다.)
print(a[4:8])
print(a[0:]) #0부터 끝까지
print(a[:4]) #처음부터 4미만까지
print(a[:]) #처음부터 끝까지라는 의미이긴 하나 사실상 실행이 무의미함
print(a[5:-1]) #5부터 제일끝의 것을 포함하지 '않고'(미만)까지
#빈칸은 제한없이 다 출력하겠다는 의미이다.

sw="19970605SW"
month=sw[4:-4]
name=sw[-2:]
print(month+"월")
print("이름:"+name)


#문자열 포매팅 : 문자열안에 어떤 특정 값을 삽입하는 방법

#숫자 대입 (특정값이 숫자일때)
x=10
y=20
str1="i eat %d apples" % y
print(str1)
#문자열 대입 (특정값이 문자일때)
x1="one"
str2="I eat %s apples" % x1
print(str2)
#문자열 포매팅에서 숫자를 삽입하려면 %d룰 사용 (단 숫자는 %s도 사용가능)
#문자열 포매팅에서 문자를 삽입하려면 %s룰 사용

#오늘 날짜 요일
#오늘은 16일 수요일입니다.
x="16수"
y="17목"
xx="18금"
slx=x[:2]
slx1=y[:2]
slx2=xx[:2]
str11="오늘은 %s일 입니다" % slx
print(str11)

#문자열 포매팅 2가지 이상의 값 넣기
x=10
y="three"
string="I ate %d apples. so i was sick for %s days." % (x,y)
print(string)

# 포맷 코드 종류
# %d %s %c %f %%
# %d는 정수 데이터를 위한 포맷코드
# %s는 문자열 데이터를 위한 포맷코드
# %c는 문자 1개를 위한 포맷코드
# %f는 부동소수를 위한 포맷코드 (부동소수란? ex)3.14)
# %%는 문자 % 표기를 표현하기 위한 포맷코드
# %d %c %f는 %s를 써도 무방함
string1="Error is %d%%" % 20 # 퍼센트를 나타내기 위해서는 %%를 붙여준다
print(string1)

#이름 연락처 나이 날짜 <4가지 정보>를 하나의 변수에 선언하고 문자열 포매팅을 통해
#'오늘 날짜는 xx일,이름은 xx이고 연락처는 xxxxxxx이고 나이xx입니다.'를 구현할 것
x="김승완0108285170926220316"
sl1=x[-6:]
sl2=x[:3]
sl3=x[3:-8]
sl4=x[-8:-6]
string2="오늘 날짜는 %s일, 이름은 %s이고 연락처는 %s이고 나이%s입니다." % (sl1,sl2,sl3,sl4)
print(string2)

#소수점 잘라서 표현하기
x=3.141592
print("원주율 %f" % x)
print("원주율 %s" % x)
print("원주율 %0.2f" % x) #소수점의 두자리까지 포함하라는 뜻
print("원주율 %0.3f" % x) #소수점의 세자리까지 포함하라는 뜻이고 숫자는 반올림 되어서 나타난 것을 알 수 있음

#format 함수를 사용한 포매팅
string1="I eat {0} apples.".format(3)
#format함수는 한정된 함수(문자열에만 쓸수 있는 함수)->관련함수
#여기서 .은 '~에', '~의'라고 해석하면 편하다.
print(string1)
string1="I eat {0} apples.".format("five")
print(string1)
x=1000
string1="I eat {0} apples.".format(x)
print(string1)
string1="I eat {0} apples. {1}".format(10,1000)
print(string1)
string1="I eat {number} apples. {h}".format(number=10,h=100)
print(string1)

#문자열 관련 함수들
#문자열 자료형은 자체적으로 함수를 가지고 있다.
#이런 함수들을 문자열 관련 함수라고 한다.
# 문자열 변수 이름 뒤에 .을 붙인 다음에 함수이름을 쓴다.
#1. count : 문자 개수 세기
string_sample="hello!"
print(string_sample.count('l'))
#2. find : 위치 찾기
print(string_sample.find('!')) #다섯번째라는 뜻이 아닌 인덱스 번호가 5번이라는 뜻 (인덱스 번호 반환)
print(string_sample.find("X")) #찾고자 하는게 없으면 -1 반환
#3. index : 위치 찾기
print(string_sample.index('!')) #찾으면 인덱스 번호 반환 #index 함수는 없는 문자를 찾지 못하고 오류 발생
#4. join : 문자열의 삽입
print(string_sample.join("1234")) #문자열을 대상에 사이사이에 끼워 넣는다. #join함수는 그 자체가 주체인 느낌
print('        '.join("1234"))

#대소문자 변경 함수
#1.대문자로 변경 upper
print(string_sample.upper()) #upper함수는 그 안에 아무것도 들어가지 않음(대문자로 바꿔주는 역할만을 하므로)
#2.소문자로 변경 lower
print(string_sample.lower()) #lower함수는 그 안에 아무것도 들어가지 않음(대문자로 바꿔주는 역할만을 하므로)

#공백지우기 함수
stringX="    hello"
stringX1=stringX.lstrip()
print(stringX1)
#양쪽 공백 지우기 : strip()
#왼쪽 공백 지우기 : lstrip()
#오른쪽 공백 지우기 : rstrip()

#문자열 바꾸기 함수 replace()
date="20220316목요일"
print(date.replace("목요일","수요일"))
print(date) #replace함수도 원본에 영향을 주지 않는 함수다.

#문자열 나누기 split()
date="2022 03 16 수"
print(date.split()) #split은 문자를 찢어서 나눈다는 뜻이다. #공백을 기준으로 나눈다.
print(date.split('3')) #기준점을 '3'으로 잡았기 때문에 '3'을 기준으로 찢는다(3은 없어짐)
#이로인해 도출된 타입(하나로 묶여나오는 형태) 결과물을 list라고 한다. = split 함수의 반환 타입은 list이다.
# ex)['2022', '03', '16', '수']
